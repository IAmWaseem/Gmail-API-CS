/*
 * GmailAPI.Tests
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 01/27/2017
 */
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Threading.Tasks;
using GmailAPI.PCL;
using GmailAPI.PCL.Utilities; 
using GmailAPI.PCL.Http.Client;
using GmailAPI.PCL.Http.Response;
using GmailAPI.Tests.Helpers;
using NUnit.Framework;
using GmailAPI.PCL.Controllers;
using GmailAPI.PCL.Models;
using GmailAPI.PCL.Exceptions;

namespace GmailAPI.Tests
{
    [TestFixture]
    public class UsersControllerTest : ControllerTestBase
    {
        /// <summary>
        /// Controller instance (for all tests)
        /// </summary>
        private static UsersController controller;

        /// <summary>
        /// Setup test class
        /// </summary>
        [SetUp]
        public static void SetUpClass()
        {
            controller = GetClient().Users;
        }

        /// <summary>
        /// Set up or update a push notification watch on the given user mailbox. 
        /// </summary>
        [Test]
        public async Task TestWatch1() 
        {
            // Parameters for the API call
            WatchRequest body = APIHelper.JsonDeserialize<WatchRequest>("{  \"labelFilterAction\": \"exclude\",  \"labelIds\": []}");
            string userId = "me";
            string alt = "json";
            string fields = null;
            string key = null;
            string oauthToken = null;
            bool? prettyPrint = true;
            string quotaUser = null;
            string userIp = null;

            // Perform API call
            WatchResponse result = null;

            try
            {
                result = await controller.CreateWatchAsync(body, userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

        }

        /// <summary>
        /// Stop receiving push notifications for the given user mailbox. 
        /// </summary>
        [Test]
        public async Task TestStop1() 
        {
            // Parameters for the API call
            string userId = "me";
            string alt = "json";
            string fields = null;
            string key = null;
            string oauthToken = null;
            bool? prettyPrint = true;
            string quotaUser = null;
            string userIp = null;

            // Perform API call

            try
            {
                await controller.CreateStopAsync(userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

        }

        /// <summary>
        /// Gets the current user's Gmail profile. 
        /// </summary>
        [Test]
        public async Task TestGetProfile1() 
        {
            // Parameters for the API call
            string userId = "me";
            string alt = "json";
            string fields = null;
            string key = null;
            string oauthToken = null;
            bool? prettyPrint = true;
            string quotaUser = null;
            string userIp = null;

            // Perform API call
            Profile result = null;

            try
            {
                result = await controller.GetProfileAsync(userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

        }

    }
}