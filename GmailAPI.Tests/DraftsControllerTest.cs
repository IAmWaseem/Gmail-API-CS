/*
 * GmailAPI.Tests
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 01/27/2017
 */
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Threading.Tasks;
using GmailAPI.PCL;
using GmailAPI.PCL.Utilities; 
using GmailAPI.PCL.Http.Client;
using GmailAPI.PCL.Http.Response;
using GmailAPI.Tests.Helpers;
using NUnit.Framework;
using GmailAPI.PCL.Controllers;
using GmailAPI.PCL.Models;
using GmailAPI.PCL.Exceptions;

namespace GmailAPI.Tests
{
    [TestFixture]
    public class DraftsControllerTest : ControllerTestBase
    {
        /// <summary>
        /// Controller instance (for all tests)
        /// </summary>
        private static DraftsController controller;

        /// <summary>
        /// Setup test class
        /// </summary>
        [SetUp]
        public static void SetUpClass()
        {
            controller = GetClient().Drafts;
        }

        /// <summary>
        /// Sends the specified, existing draft to the recipients in the To, Cc, and Bcc headers. 
        /// </summary>
        [Test]
        public async Task TestSend1() 
        {
            // Parameters for the API call
            Draft body = APIHelper.JsonDeserialize<Draft>("{  \"message\": {    \"labelIds\": [],    \"payload\": {      \"body\": {},      \"headers\": [        {}      ],      \"parts\": [        {}      ]    }  }}");
            string userId = "me";
            string alt = "json";
            string fields = null;
            string key = null;
            string oauthToken = null;
            bool? prettyPrint = true;
            string quotaUser = null;
            string userIp = null;

            // Perform API call
            Message result = null;

            try
            {
                result = await controller.CreateSendAsync(body, userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{  \"labelIds\": [],  \"payload\": {    \"body\": {},    \"headers\": [      {}    ],    \"parts\": [      {}    ]  }}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// Lists the drafts in the user's mailbox. 
        /// </summary>
        [Test]
        public async Task TestList1() 
        {
            // Parameters for the API call
            string userId = "me";
            string alt = "json";
            string fields = null;
            string key = null;
            string oauthToken = null;
            bool? prettyPrint = true;
            string quotaUser = null;
            string userIp = null;
            double? maxResults = 100;
            string pageToken = null;

            // Perform API call
            ListDraftsResponse result = null;

            try
            {
                result = await controller.ListAsync(userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, pageToken);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{  \"drafts\": [    {      \"message\": {        \"labelIds\": [],        \"payload\": {          \"body\": {},          \"headers\": [            {}          ],          \"parts\": [            {}          ]        }      }    }  ]}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// Creates a new draft with the DRAFT label. 
        /// </summary>
        [Test]
        public async Task TestCreate1() 
        {
            // Parameters for the API call
            Draft body = APIHelper.JsonDeserialize<Draft>("{  \"message\": {    \"labelIds\": [],    \"payload\": {      \"body\": {},      \"headers\": [        {}      ],      \"parts\": [        {}      ]    }  }}");
            string userId = "me";
            string alt = "json";
            string fields = null;
            string key = null;
            string oauthToken = null;
            bool? prettyPrint = true;
            string quotaUser = null;
            string userIp = null;

            // Perform API call
            Draft result = null;

            try
            {
                result = await controller.CreateAsync(body, userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{  \"message\": {    \"labelIds\": [],    \"payload\": {      \"body\": {},      \"headers\": [        {}      ],      \"parts\": [        {}      ]    }  }}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

    }
}