/*
 * GmailAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 01/27/2017
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using GmailAPI.PCL;
using GmailAPI.PCL.Utilities;

namespace GmailAPI.PCL.Models
{
    public class Message : INotifyPropertyChanged 
    {
        // These fields hold the values for the public properties.
        private string historyId;
        private string id;
        private string internalDate;
        private List<string> labelIds;
        private MessagePart payload;
        private string raw;
        private double? sizeEstimate;
        private string snippet;
        private string threadId;

        /// <summary>
        /// The ID of the last history record that modified this message.
        /// </summary>
        [JsonProperty("historyId")]
        public string HistoryId 
        { 
            get 
            {
                return this.historyId; 
            } 
            set 
            {
                this.historyId = value;
                onPropertyChanged("HistoryId");
            }
        }

        /// <summary>
        /// The immutable ID of the message.
        /// </summary>
        [JsonProperty("id")]
        public string Id 
        { 
            get 
            {
                return this.id; 
            } 
            set 
            {
                this.id = value;
                onPropertyChanged("Id");
            }
        }

        /// <summary>
        /// The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the Date header. However, for API-migrated mail, it can be configured by client to be based on the Date header.
        /// </summary>
        [JsonProperty("internalDate")]
        public string InternalDate 
        { 
            get 
            {
                return this.internalDate; 
            } 
            set 
            {
                this.internalDate = value;
                onPropertyChanged("InternalDate");
            }
        }

        /// <summary>
        /// List of IDs of labels applied to this message.
        /// </summary>
        [JsonProperty("labelIds")]
        public List<string> LabelIds 
        { 
            get 
            {
                return this.labelIds; 
            } 
            set 
            {
                this.labelIds = value;
                onPropertyChanged("LabelIds");
            }
        }

        /// <summary>
        /// A single MIME message part.
        /// </summary>
        [JsonProperty("payload")]
        public MessagePart Payload 
        { 
            get 
            {
                return this.payload; 
            } 
            set 
            {
                this.payload = value;
                onPropertyChanged("Payload");
            }
        }

        /// <summary>
        /// The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in messages.get and drafts.get responses when the format=RAW parameter is supplied.
        /// </summary>
        [JsonProperty("raw")]
        public string Raw 
        { 
            get 
            {
                return this.raw; 
            } 
            set 
            {
                this.raw = value;
                onPropertyChanged("Raw");
            }
        }

        /// <summary>
        /// Estimated size in bytes of the message.
        /// </summary>
        [JsonProperty("sizeEstimate")]
        public double? SizeEstimate 
        { 
            get 
            {
                return this.sizeEstimate; 
            } 
            set 
            {
                this.sizeEstimate = value;
                onPropertyChanged("SizeEstimate");
            }
        }

        /// <summary>
        /// A short part of the message text.
        /// </summary>
        [JsonProperty("snippet")]
        public string Snippet 
        { 
            get 
            {
                return this.snippet; 
            } 
            set 
            {
                this.snippet = value;
                onPropertyChanged("Snippet");
            }
        }

        /// <summary>
        /// The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met:
        /// - The requested threadId must be specified on the Message or Draft.Message you supply with your request.
        /// - The References and In-Reply-To headers must be set in compliance with the RFC 2822 standard.
        /// - The Subject headers must match.
        /// </summary>
        [JsonProperty("threadId")]
        public string ThreadId 
        { 
            get 
            {
                return this.threadId; 
            } 
            set 
            {
                this.threadId = value;
                onPropertyChanged("ThreadId");
            }
        }

        /// <summary>
        /// Property changed event for observer pattern
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises event when a property is changed
        /// </summary>
        /// <param name="propertyName">Name of the changed property</param>
        protected void onPropertyChanged(String propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
} 