/*
 * GmailAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 01/27/2017
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using GmailAPI.PCL;
using GmailAPI.PCL.Utilities;

namespace GmailAPI.PCL.Models
{
    public class WatchResponse : INotifyPropertyChanged 
    {
        // These fields hold the values for the public properties.
        private string expiration;
        private string historyId;

        /// <summary>
        /// When Gmail will stop sending notifications for mailbox updates (epoch millis). Call watch again before this time to renew the watch.
        /// </summary>
        [JsonProperty("expiration")]
        public string Expiration 
        { 
            get 
            {
                return this.expiration; 
            } 
            set 
            {
                this.expiration = value;
                onPropertyChanged("Expiration");
            }
        }

        /// <summary>
        /// The ID of the mailbox's current history record.
        /// </summary>
        [JsonProperty("historyId")]
        public string HistoryId 
        { 
            get 
            {
                return this.historyId; 
            } 
            set 
            {
                this.historyId = value;
                onPropertyChanged("HistoryId");
            }
        }

        /// <summary>
        /// Property changed event for observer pattern
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises event when a property is changed
        /// </summary>
        /// <param name="propertyName">Name of the changed property</param>
        protected void onPropertyChanged(String propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
} 