/*
 * GmailAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 01/27/2017
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using GmailAPI.PCL;
using GmailAPI.PCL.Utilities;

namespace GmailAPI.PCL.Models
{
    public class Label : INotifyPropertyChanged 
    {
        // These fields hold the values for the public properties.
        private string id;
        private LabelListVisibilityEnum? labelListVisibility;
        private MessageListVisibilityEnum? messageListVisibility;
        private double? messagesTotal;
        private double? messagesUnread;
        private string name;
        private double? threadsTotal;
        private double? threadsUnread;
        private TypeEnum? type;

        /// <summary>
        /// The immutable ID of the label.
        /// </summary>
        [JsonProperty("id")]
        public string Id 
        { 
            get 
            {
                return this.id; 
            } 
            set 
            {
                this.id = value;
                onPropertyChanged("Id");
            }
        }

        /// <summary>
        /// The visibility of the label in the label list in the Gmail web interface.
        /// </summary>
        [JsonProperty("labelListVisibility", ItemConverterType = typeof(StringValuedEnumConverter))]
        public LabelListVisibilityEnum? LabelListVisibility 
        { 
            get 
            {
                return this.labelListVisibility; 
            } 
            set 
            {
                this.labelListVisibility = value;
                onPropertyChanged("LabelListVisibility");
            }
        }

        /// <summary>
        /// The visibility of the label in the message list in the Gmail web interface.
        /// </summary>
        [JsonProperty("messageListVisibility", ItemConverterType = typeof(StringValuedEnumConverter))]
        public MessageListVisibilityEnum? MessageListVisibility 
        { 
            get 
            {
                return this.messageListVisibility; 
            } 
            set 
            {
                this.messageListVisibility = value;
                onPropertyChanged("MessageListVisibility");
            }
        }

        /// <summary>
        /// The total number of messages with the label.
        /// </summary>
        [JsonProperty("messagesTotal")]
        public double? MessagesTotal 
        { 
            get 
            {
                return this.messagesTotal; 
            } 
            set 
            {
                this.messagesTotal = value;
                onPropertyChanged("MessagesTotal");
            }
        }

        /// <summary>
        /// The number of unread messages with the label.
        /// </summary>
        [JsonProperty("messagesUnread")]
        public double? MessagesUnread 
        { 
            get 
            {
                return this.messagesUnread; 
            } 
            set 
            {
                this.messagesUnread = value;
                onPropertyChanged("MessagesUnread");
            }
        }

        /// <summary>
        /// The display name of the label.
        /// </summary>
        [JsonProperty("name")]
        public string Name 
        { 
            get 
            {
                return this.name; 
            } 
            set 
            {
                this.name = value;
                onPropertyChanged("Name");
            }
        }

        /// <summary>
        /// The total number of threads with the label.
        /// </summary>
        [JsonProperty("threadsTotal")]
        public double? ThreadsTotal 
        { 
            get 
            {
                return this.threadsTotal; 
            } 
            set 
            {
                this.threadsTotal = value;
                onPropertyChanged("ThreadsTotal");
            }
        }

        /// <summary>
        /// The number of unread threads with the label.
        /// </summary>
        [JsonProperty("threadsUnread")]
        public double? ThreadsUnread 
        { 
            get 
            {
                return this.threadsUnread; 
            } 
            set 
            {
                this.threadsUnread = value;
                onPropertyChanged("ThreadsUnread");
            }
        }

        /// <summary>
        /// The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the INBOX and UNREAD labels from messages and threads, but cannot apply or remove the DRAFTS or SENT labels from messages or threads.
        /// </summary>
        [JsonProperty("type", ItemConverterType = typeof(StringValuedEnumConverter))]
        public TypeEnum? Type 
        { 
            get 
            {
                return this.type; 
            } 
            set 
            {
                this.type = value;
                onPropertyChanged("Type");
            }
        }

        /// <summary>
        /// Property changed event for observer pattern
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises event when a property is changed
        /// </summary>
        /// <param name="propertyName">Name of the changed property</param>
        protected void onPropertyChanged(String propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
} 