/*
 * GmailAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 01/27/2017
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using GmailAPI.PCL;
using GmailAPI.PCL.Utilities;

namespace GmailAPI.PCL.Models
{
    public class MessagePart : INotifyPropertyChanged 
    {
        // These fields hold the values for the public properties.
        private MessagePartBody body;
        private string filename;
        private List<MessagePartHeader> headers;
        private string mimeType;
        private string partId;
        private List<MessagePart> parts;

        /// <summary>
        /// The body of a single MIME message part.
        /// </summary>
        [JsonProperty("body")]
        public MessagePartBody Body 
        { 
            get 
            {
                return this.body; 
            } 
            set 
            {
                this.body = value;
                onPropertyChanged("Body");
            }
        }

        /// <summary>
        /// The filename of the attachment. Only present if this message part represents an attachment.
        /// </summary>
        [JsonProperty("filename")]
        public string Filename 
        { 
            get 
            {
                return this.filename; 
            } 
            set 
            {
                this.filename = value;
                onPropertyChanged("Filename");
            }
        }

        /// <summary>
        /// List of headers on this message part. For the top-level message part, representing the entire message payload, it will contain the standard RFC 2822 email headers such as To, From, and Subject.
        /// </summary>
        [JsonProperty("headers")]
        public List<MessagePartHeader> Headers 
        { 
            get 
            {
                return this.headers; 
            } 
            set 
            {
                this.headers = value;
                onPropertyChanged("Headers");
            }
        }

        /// <summary>
        /// The MIME type of the message part.
        /// </summary>
        [JsonProperty("mimeType")]
        public string MimeType 
        { 
            get 
            {
                return this.mimeType; 
            } 
            set 
            {
                this.mimeType = value;
                onPropertyChanged("MimeType");
            }
        }

        /// <summary>
        /// The immutable ID of the message part.
        /// </summary>
        [JsonProperty("partId")]
        public string PartId 
        { 
            get 
            {
                return this.partId; 
            } 
            set 
            {
                this.partId = value;
                onPropertyChanged("PartId");
            }
        }

        /// <summary>
        /// The child MIME message parts of this part. This only applies to container MIME message parts, for example multipart/*. For non- container MIME message part types, such as text/plain, this field is empty. For more information, see RFC 1521.
        /// </summary>
        [JsonProperty("parts")]
        public List<MessagePart> Parts 
        { 
            get 
            {
                return this.parts; 
            } 
            set 
            {
                this.parts = value;
                onPropertyChanged("Parts");
            }
        }

        /// <summary>
        /// Property changed event for observer pattern
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises event when a property is changed
        /// </summary>
        /// <param name="propertyName">Name of the changed property</param>
        protected void onPropertyChanged(String propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
} 