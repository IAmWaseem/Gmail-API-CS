/*
 * GmailAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 01/27/2017
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using GmailAPI.PCL;
using GmailAPI.PCL.Utilities;
using GmailAPI.PCL.Http.Request;
using GmailAPI.PCL.Http.Response;
using GmailAPI.PCL.Http.Client;
using GmailAPI.PCL.Exceptions;
using GmailAPI.PCL.Models;

namespace GmailAPI.PCL.Controllers
{
    public partial class MessagesController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static MessagesController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static MessagesController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new MessagesController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Removes the specified message from the trash.
        /// </summary>
        /// <param name="id">Required parameter: The ID of the message to remove from Trash.</param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <return>Returns the Message response from the API call</return>
        public Message CreateUntrash(
                string id,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null)
        {
            Task<Message> t = CreateUntrashAsync(id, userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Removes the specified message from the trash.
        /// </summary>
        /// <param name="id">Required parameter: The ID of the message to remove from Trash.</param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <return>Returns the Message response from the API call</return>
        public async Task<Message> CreateUntrashAsync(
                string id,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/{userId}/messages/{id}/untrash");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id },
                { "userId", (null != userId) ? userId : "me" }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "alt", (null != alt) ? alt : "json" },
                { "fields", fields },
                { "key", key },
                { "oauth_token", oauthToken },
                { "prettyPrint", (null != prettyPrint) ? prettyPrint : true },
                { "quotaUser", quotaUser },
                { "userIp", userIp }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Message>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Moves the specified message to the trash.
        /// </summary>
        /// <param name="id">Required parameter: The ID of the message to Trash.</param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <return>Returns the Message response from the API call</return>
        public Message CreateTrash(
                string id,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null)
        {
            Task<Message> t = CreateTrashAsync(id, userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Moves the specified message to the trash.
        /// </summary>
        /// <param name="id">Required parameter: The ID of the message to Trash.</param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <return>Returns the Message response from the API call</return>
        public async Task<Message> CreateTrashAsync(
                string id,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/{userId}/messages/{id}/trash");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id },
                { "userId", (null != userId) ? userId : "me" }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "alt", (null != alt) ? alt : "json" },
                { "fields", fields },
                { "key", key },
                { "oauth_token", oauthToken },
                { "prettyPrint", (null != prettyPrint) ? prettyPrint : true },
                { "quotaUser", quotaUser },
                { "userIp", userIp }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Message>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Sends the specified message to the recipients in the To, Cc, and Bcc headers.
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <return>Returns the Message response from the API call</return>
        public Message CreateSend(
                Message body,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null)
        {
            Task<Message> t = CreateSendAsync(body, userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Sends the specified message to the recipients in the To, Cc, and Bcc headers.
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <return>Returns the Message response from the API call</return>
        public async Task<Message> CreateSendAsync(
                Message body,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/{userId}/messages/send");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "userId", (null != userId) ? userId : "me" }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "alt", (null != alt) ? alt : "json" },
                { "fields", fields },
                { "key", key },
                { "oauth_token", oauthToken },
                { "prettyPrint", (null != prettyPrint) ? prettyPrint : true },
                { "quotaUser", quotaUser },
                { "userIp", userIp }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Message>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Modifies the labels on the specified message.
        /// </summary>
        /// <param name="id">Required parameter: The ID of the message to modify.</param>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <return>Returns the Message response from the API call</return>
        public Message Modify(
                string id,
                ModifyMessageRequest body,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null)
        {
            Task<Message> t = ModifyAsync(id, body, userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Modifies the labels on the specified message.
        /// </summary>
        /// <param name="id">Required parameter: The ID of the message to modify.</param>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <return>Returns the Message response from the API call</return>
        public async Task<Message> ModifyAsync(
                string id,
                ModifyMessageRequest body,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/{userId}/messages/{id}/modify");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id },
                { "userId", (null != userId) ? userId : "me" }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "alt", (null != alt) ? alt : "json" },
                { "fields", fields },
                { "key", key },
                { "oauth_token", oauthToken },
                { "prettyPrint", (null != prettyPrint) ? prettyPrint : true },
                { "quotaUser", quotaUser },
                { "userIp", userIp }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Message>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Directly inserts a message into only this user's mailbox similar to IMAP APPEND, bypassing most scanning and classification. Does not send a message.
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <param name="deleted">Optional parameter: Mark the email as permanently deleted (not TRASH) and only visible in Google Apps Vault to a Vault administrator. Only used for Google Apps for Work accounts.</param>
        /// <param name="internalDateSource">Optional parameter: Source for Gmail's internal date of the message. (Acceptable values are: "dateHeader", "receivedTime")</param>
        /// <return>Returns the Message response from the API call</return>
        public Message Insert(
                Message body,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null,
                bool? deleted = false,
                string internalDateSource = "receivedTime")
        {
            Task<Message> t = InsertAsync(body, userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, deleted, internalDateSource);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Directly inserts a message into only this user's mailbox similar to IMAP APPEND, bypassing most scanning and classification. Does not send a message.
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <param name="deleted">Optional parameter: Mark the email as permanently deleted (not TRASH) and only visible in Google Apps Vault to a Vault administrator. Only used for Google Apps for Work accounts.</param>
        /// <param name="internalDateSource">Optional parameter: Source for Gmail's internal date of the message. (Acceptable values are: "dateHeader", "receivedTime")</param>
        /// <return>Returns the Message response from the API call</return>
        public async Task<Message> InsertAsync(
                Message body,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null,
                bool? deleted = false,
                string internalDateSource = "receivedTime")
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/{userId}/messages");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "userId", (null != userId) ? userId : "me" }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "alt", (null != alt) ? alt : "json" },
                { "fields", fields },
                { "key", key },
                { "oauth_token", oauthToken },
                { "prettyPrint", (null != prettyPrint) ? prettyPrint : true },
                { "quotaUser", quotaUser },
                { "userIp", userIp },
                { "deleted", (null != deleted) ? deleted : false },
                { "internalDateSource", (null != internalDateSource) ? internalDateSource : "receivedTime" }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Message>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Gets the specified message.
        /// </summary>
        /// <param name="id">Required parameter: The ID of the message to retrieve.</param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <param name="format">Optional parameter: The format to return the message in. (Acceptable values are: "full", "metadata", "minimal", "raw")</param>
        /// <param name="metadataHeaders">Optional parameter: When given and format is METADATA, only include headers specified.</param>
        /// <return>Returns the Message response from the API call</return>
        public Message GetMessagesByUserIdAndId(
                string id,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null,
                string format = "full",
                string metadataHeaders = null)
        {
            Task<Message> t = GetMessagesByUserIdAndIdAsync(id, userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, format, metadataHeaders);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Gets the specified message.
        /// </summary>
        /// <param name="id">Required parameter: The ID of the message to retrieve.</param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <param name="format">Optional parameter: The format to return the message in. (Acceptable values are: "full", "metadata", "minimal", "raw")</param>
        /// <param name="metadataHeaders">Optional parameter: When given and format is METADATA, only include headers specified.</param>
        /// <return>Returns the Message response from the API call</return>
        public async Task<Message> GetMessagesByUserIdAndIdAsync(
                string id,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null,
                string format = "full",
                string metadataHeaders = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/{userId}/messages/{id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id },
                { "userId", (null != userId) ? userId : "me" }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "alt", (null != alt) ? alt : "json" },
                { "fields", fields },
                { "key", key },
                { "oauth_token", oauthToken },
                { "prettyPrint", (null != prettyPrint) ? prettyPrint : true },
                { "quotaUser", quotaUser },
                { "userIp", userIp },
                { "format", (null != format) ? format : "full" },
                { "metadataHeaders", metadataHeaders }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Message>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Immediately and permanently deletes the specified message. This operation cannot be undone. Prefer messages.trash instead.
        /// </summary>
        /// <param name="id">Required parameter: The ID of the message to delete.</param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteMessagesByUserIdAndId(
                string id,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null)
        {
            Task t = DeleteMessagesByUserIdAndIdAsync(id, userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Immediately and permanently deletes the specified message. This operation cannot be undone. Prefer messages.trash instead.
        /// </summary>
        /// <param name="id">Required parameter: The ID of the message to delete.</param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteMessagesByUserIdAndIdAsync(
                string id,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/{userId}/messages/{id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id },
                { "userId", (null != userId) ? userId : "me" }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "alt", (null != alt) ? alt : "json" },
                { "fields", fields },
                { "key", key },
                { "oauth_token", oauthToken },
                { "prettyPrint", (null != prettyPrint) ? prettyPrint : true },
                { "quotaUser", quotaUser },
                { "userIp", userIp }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Lists the messages in the user's mailbox.
        /// </summary>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <param name="includeSpamTrash">Optional parameter: Include messages from SPAM and TRASH in the results.</param>
        /// <param name="labelIds">Optional parameter: Only return messages with labels that match all of the specified label IDs.</param>
        /// <param name="maxResults">Optional parameter: Maximum number of messages to return.</param>
        /// <param name="pageToken">Optional parameter: Page token to retrieve a specific page of results in the list.</param>
        /// <param name="q">Optional parameter: Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, "from:someuser@example.com rfc822msgid: is:unread".</param>
        /// <return>Returns the ListMessagesResponse response from the API call</return>
        public ListMessagesResponse List(
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null,
                bool? includeSpamTrash = false,
                string labelIds = null,
                double? maxResults = 100,
                string pageToken = null,
                string q = null)
        {
            Task<ListMessagesResponse> t = ListAsync(userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, includeSpamTrash, labelIds, maxResults, pageToken, q);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Lists the messages in the user's mailbox.
        /// </summary>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <param name="includeSpamTrash">Optional parameter: Include messages from SPAM and TRASH in the results.</param>
        /// <param name="labelIds">Optional parameter: Only return messages with labels that match all of the specified label IDs.</param>
        /// <param name="maxResults">Optional parameter: Maximum number of messages to return.</param>
        /// <param name="pageToken">Optional parameter: Page token to retrieve a specific page of results in the list.</param>
        /// <param name="q">Optional parameter: Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, "from:someuser@example.com rfc822msgid: is:unread".</param>
        /// <return>Returns the ListMessagesResponse response from the API call</return>
        public async Task<ListMessagesResponse> ListAsync(
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null,
                bool? includeSpamTrash = false,
                string labelIds = null,
                double? maxResults = 100,
                string pageToken = null,
                string q = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/{userId}/messages");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "userId", (null != userId) ? userId : "me" }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "alt", (null != alt) ? alt : "json" },
                { "fields", fields },
                { "key", key },
                { "oauth_token", oauthToken },
                { "prettyPrint", (null != prettyPrint) ? prettyPrint : true },
                { "quotaUser", quotaUser },
                { "userIp", userIp },
                { "includeSpamTrash", (null != includeSpamTrash) ? includeSpamTrash : false },
                { "labelIds", labelIds },
                { "maxResults", (null != maxResults) ? maxResults : 100 },
                { "pageToken", pageToken },
                { "q", q }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ListMessagesResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Imports a message into only this user's mailbox, with standard email delivery scanning and classification similar to receiving via SMTP. Does not send a message.
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <param name="deleted">Optional parameter: Mark the email as permanently deleted (not TRASH) and only visible in Google Apps Vault to a Vault administrator. Only used for Google Apps for Work accounts.</param>
        /// <param name="internalDateSource">Optional parameter: Source for Gmail's internal date of the message. (Acceptable values are: "dateHeader", "receivedTime")</param>
        /// <param name="neverMarkSpam">Optional parameter: Ignore the Gmail spam classifier decision and never mark this email as SPAM in the mailbox.</param>
        /// <param name="processForCalendar">Optional parameter: Process calendar invites in the email and add any extracted meetings to the Google Calendar for this user.</param>
        /// <return>Returns the Message response from the API call</return>
        public Message CreateImport(
                Message body,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null,
                bool? deleted = false,
                string internalDateSource = "dateHeader",
                bool? neverMarkSpam = false,
                bool? processForCalendar = false)
        {
            Task<Message> t = CreateImportAsync(body, userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, deleted, internalDateSource, neverMarkSpam, processForCalendar);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Imports a message into only this user's mailbox, with standard email delivery scanning and classification similar to receiving via SMTP. Does not send a message.
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <param name="deleted">Optional parameter: Mark the email as permanently deleted (not TRASH) and only visible in Google Apps Vault to a Vault administrator. Only used for Google Apps for Work accounts.</param>
        /// <param name="internalDateSource">Optional parameter: Source for Gmail's internal date of the message. (Acceptable values are: "dateHeader", "receivedTime")</param>
        /// <param name="neverMarkSpam">Optional parameter: Ignore the Gmail spam classifier decision and never mark this email as SPAM in the mailbox.</param>
        /// <param name="processForCalendar">Optional parameter: Process calendar invites in the email and add any extracted meetings to the Google Calendar for this user.</param>
        /// <return>Returns the Message response from the API call</return>
        public async Task<Message> CreateImportAsync(
                Message body,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null,
                bool? deleted = false,
                string internalDateSource = "dateHeader",
                bool? neverMarkSpam = false,
                bool? processForCalendar = false)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/{userId}/messages/import");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "userId", (null != userId) ? userId : "me" }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "alt", (null != alt) ? alt : "json" },
                { "fields", fields },
                { "key", key },
                { "oauth_token", oauthToken },
                { "prettyPrint", (null != prettyPrint) ? prettyPrint : true },
                { "quotaUser", quotaUser },
                { "userIp", userIp },
                { "deleted", (null != deleted) ? deleted : false },
                { "internalDateSource", (null != internalDateSource) ? internalDateSource : "dateHeader" },
                { "neverMarkSpam", (null != neverMarkSpam) ? neverMarkSpam : false },
                { "processForCalendar", (null != processForCalendar) ? processForCalendar : false }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Message>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 