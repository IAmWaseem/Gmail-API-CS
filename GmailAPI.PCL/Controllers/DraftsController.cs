/*
 * GmailAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 01/27/2017
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using GmailAPI.PCL;
using GmailAPI.PCL.Utilities;
using GmailAPI.PCL.Http.Request;
using GmailAPI.PCL.Http.Response;
using GmailAPI.PCL.Http.Client;
using GmailAPI.PCL.Exceptions;
using GmailAPI.PCL.Models;

namespace GmailAPI.PCL.Controllers
{
    public partial class DraftsController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static DraftsController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static DraftsController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new DraftsController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Replaces a draft's content.
        /// </summary>
        /// <param name="id">Required parameter: The ID of the draft to update.</param>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <return>Returns the Draft response from the API call</return>
        public Draft Update(
                string id,
                Draft body,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null)
        {
            Task<Draft> t = UpdateAsync(id, body, userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Replaces a draft's content.
        /// </summary>
        /// <param name="id">Required parameter: The ID of the draft to update.</param>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <return>Returns the Draft response from the API call</return>
        public async Task<Draft> UpdateAsync(
                string id,
                Draft body,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/{userId}/drafts/{id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id },
                { "userId", (null != userId) ? userId : "me" }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "alt", (null != alt) ? alt : "json" },
                { "fields", fields },
                { "key", key },
                { "oauth_token", oauthToken },
                { "prettyPrint", (null != prettyPrint) ? prettyPrint : true },
                { "quotaUser", quotaUser },
                { "userIp", userIp }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Draft>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Immediately and permanently deletes the specified draft. Does not simply trash it.
        /// </summary>
        /// <param name="id">Required parameter: The ID of the draft to update.</param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteDraftsByUserIdAndId(
                string id,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null)
        {
            Task t = DeleteDraftsByUserIdAndIdAsync(id, userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Immediately and permanently deletes the specified draft. Does not simply trash it.
        /// </summary>
        /// <param name="id">Required parameter: The ID of the draft to update.</param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteDraftsByUserIdAndIdAsync(
                string id,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/{userId}/drafts/{id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id },
                { "userId", (null != userId) ? userId : "me" }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "alt", (null != alt) ? alt : "json" },
                { "fields", fields },
                { "key", key },
                { "oauth_token", oauthToken },
                { "prettyPrint", (null != prettyPrint) ? prettyPrint : true },
                { "quotaUser", quotaUser },
                { "userIp", userIp }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Sends the specified, existing draft to the recipients in the To, Cc, and Bcc headers.
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <return>Returns the Message response from the API call</return>
        public Message CreateSend(
                Draft body,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null)
        {
            Task<Message> t = CreateSendAsync(body, userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Sends the specified, existing draft to the recipients in the To, Cc, and Bcc headers.
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <return>Returns the Message response from the API call</return>
        public async Task<Message> CreateSendAsync(
                Draft body,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/{userId}/drafts/send");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "userId", (null != userId) ? userId : "me" }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "alt", (null != alt) ? alt : "json" },
                { "fields", fields },
                { "key", key },
                { "oauth_token", oauthToken },
                { "prettyPrint", (null != prettyPrint) ? prettyPrint : true },
                { "quotaUser", quotaUser },
                { "userIp", userIp }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Message>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Lists the drafts in the user's mailbox.
        /// </summary>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <param name="maxResults">Optional parameter: Maximum number of drafts to return.</param>
        /// <param name="pageToken">Optional parameter: Page token to retrieve a specific page of results in the list.</param>
        /// <return>Returns the ListDraftsResponse response from the API call</return>
        public ListDraftsResponse List(
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null,
                double? maxResults = 100,
                string pageToken = null)
        {
            Task<ListDraftsResponse> t = ListAsync(userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, pageToken);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Lists the drafts in the user's mailbox.
        /// </summary>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <param name="maxResults">Optional parameter: Maximum number of drafts to return.</param>
        /// <param name="pageToken">Optional parameter: Page token to retrieve a specific page of results in the list.</param>
        /// <return>Returns the ListDraftsResponse response from the API call</return>
        public async Task<ListDraftsResponse> ListAsync(
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null,
                double? maxResults = 100,
                string pageToken = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/{userId}/drafts");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "userId", (null != userId) ? userId : "me" }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "alt", (null != alt) ? alt : "json" },
                { "fields", fields },
                { "key", key },
                { "oauth_token", oauthToken },
                { "prettyPrint", (null != prettyPrint) ? prettyPrint : true },
                { "quotaUser", quotaUser },
                { "userIp", userIp },
                { "maxResults", (null != maxResults) ? maxResults : 100 },
                { "pageToken", pageToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ListDraftsResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Gets the specified draft.
        /// </summary>
        /// <param name="id">Required parameter: The ID of the draft to retrieve.</param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <param name="format">Optional parameter: The format to return the draft in. (Acceptable values are: "full", "metadata", "minimal", "raw")</param>
        /// <return>Returns the Draft response from the API call</return>
        public Draft GetDraftsByUserIdAndId(
                string id,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null,
                string format = "full")
        {
            Task<Draft> t = GetDraftsByUserIdAndIdAsync(id, userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, format);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Gets the specified draft.
        /// </summary>
        /// <param name="id">Required parameter: The ID of the draft to retrieve.</param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <param name="format">Optional parameter: The format to return the draft in. (Acceptable values are: "full", "metadata", "minimal", "raw")</param>
        /// <return>Returns the Draft response from the API call</return>
        public async Task<Draft> GetDraftsByUserIdAndIdAsync(
                string id,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null,
                string format = "full")
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/{userId}/drafts/{id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id },
                { "userId", (null != userId) ? userId : "me" }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "alt", (null != alt) ? alt : "json" },
                { "fields", fields },
                { "key", key },
                { "oauth_token", oauthToken },
                { "prettyPrint", (null != prettyPrint) ? prettyPrint : true },
                { "quotaUser", quotaUser },
                { "userIp", userIp },
                { "format", (null != format) ? format : "full" }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Draft>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Creates a new draft with the DRAFT label.
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <return>Returns the Draft response from the API call</return>
        public Draft Create(
                Draft body,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null)
        {
            Task<Draft> t = CreateAsync(body, userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Creates a new draft with the DRAFT label.
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <return>Returns the Draft response from the API call</return>
        public async Task<Draft> CreateAsync(
                Draft body,
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/{userId}/drafts");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "userId", (null != userId) ? userId : "me" }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "alt", (null != alt) ? alt : "json" },
                { "fields", fields },
                { "key", key },
                { "oauth_token", oauthToken },
                { "prettyPrint", (null != prettyPrint) ? prettyPrint : true },
                { "quotaUser", quotaUser },
                { "userIp", userIp }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Draft>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 