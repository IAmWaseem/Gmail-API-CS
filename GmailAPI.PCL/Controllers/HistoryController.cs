/*
 * GmailAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 01/27/2017
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using GmailAPI.PCL;
using GmailAPI.PCL.Utilities;
using GmailAPI.PCL.Http.Request;
using GmailAPI.PCL.Http.Response;
using GmailAPI.PCL.Http.Client;
using GmailAPI.PCL.Exceptions;
using GmailAPI.PCL.Models;

namespace GmailAPI.PCL.Controllers
{
    public partial class HistoryController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static HistoryController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static HistoryController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new HistoryController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing historyId).
        /// </summary>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <param name="labelId">Optional parameter: Only return messages with a label matching the ID.</param>
        /// <param name="maxResults">Optional parameter: The maximum number of history records to return.</param>
        /// <param name="pageToken">Optional parameter: Page token to retrieve a specific page of results in the list.</param>
        /// <param name="startHistoryId">Optional parameter: Required. Returns history records after the specified startHistoryId. The supplied startHistoryId should be obtained from the historyId of a message, thread, or previous list response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date startHistoryId typically returns an HTTP 404 error code. A historyId is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an HTTP 404 error response, your application should perform a full sync. If you receive no nextPageToken in the response, there are no updates to retrieve and you can store the returned historyId for a future request.</param>
        /// <return>Returns the ListHistoryResponse response from the API call</return>
        public ListHistoryResponse List(
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null,
                string labelId = null,
                double? maxResults = 100,
                string pageToken = null,
                string startHistoryId = null)
        {
            Task<ListHistoryResponse> t = ListAsync(userId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, labelId, maxResults, pageToken, startHistoryId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing historyId).
        /// </summary>
        /// <param name="userId">Optional parameter: The user's email address. The special value me can be used to indicate the authenticated user.</param>
        /// <param name="alt">Optional parameter: Data format for the response. (Acceptable values are: "json")</param>
        /// <param name="fields">Optional parameter: Selector specifying which fields to include in a partial response.</param>
        /// <param name="key">Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.</param>
        /// <param name="oauthToken">Optional parameter: OAuth 2.0 token for the current user.</param>
        /// <param name="prettyPrint">Optional parameter: Returns response with indentations and line breaks.</param>
        /// <param name="quotaUser">Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</param>
        /// <param name="userIp">Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.</param>
        /// <param name="labelId">Optional parameter: Only return messages with a label matching the ID.</param>
        /// <param name="maxResults">Optional parameter: The maximum number of history records to return.</param>
        /// <param name="pageToken">Optional parameter: Page token to retrieve a specific page of results in the list.</param>
        /// <param name="startHistoryId">Optional parameter: Required. Returns history records after the specified startHistoryId. The supplied startHistoryId should be obtained from the historyId of a message, thread, or previous list response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date startHistoryId typically returns an HTTP 404 error code. A historyId is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an HTTP 404 error response, your application should perform a full sync. If you receive no nextPageToken in the response, there are no updates to retrieve and you can store the returned historyId for a future request.</param>
        /// <return>Returns the ListHistoryResponse response from the API call</return>
        public async Task<ListHistoryResponse> ListAsync(
                string userId = "me",
                string alt = "json",
                string fields = null,
                string key = null,
                string oauthToken = null,
                bool? prettyPrint = true,
                string quotaUser = null,
                string userIp = null,
                string labelId = null,
                double? maxResults = 100,
                string pageToken = null,
                string startHistoryId = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/{userId}/history");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "userId", (null != userId) ? userId : "me" }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "alt", (null != alt) ? alt : "json" },
                { "fields", fields },
                { "key", key },
                { "oauth_token", oauthToken },
                { "prettyPrint", (null != prettyPrint) ? prettyPrint : true },
                { "quotaUser", quotaUser },
                { "userIp", userIp },
                { "labelId", labelId },
                { "maxResults", (null != maxResults) ? maxResults : 100 },
                { "pageToken", pageToken },
                { "startHistoryId", startHistoryId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ListHistoryResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 